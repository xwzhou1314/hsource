server:
  port: 8081
spring:
  redis:
      database: 0
      host: localhost
      port: 6379
      password:     # 密码（默认为空
      timeout: 6000ms  # 连接超时时长（毫秒）
      jedis:
        pool:
          max-active: 1000  # 连接池最大连接数（使用负值表示没有限制）
          max-wait: -1ms      # 连接池最大阻塞等待时间（使用负值表示没有限制）
          max-idle: 10      # 连接池中的最大空闲连接
          min-idle: 5       # 连接池中的最小空闲连接
  application:
    name: item-service
  datasource:
    url: jdbc:mysql://192.168.135.123:3307/hs?useUnicode=yes&characterEncoding=UTF8&useSSL=false
    username: root
    password: zxw123
  rabbitmq:
    host: 192.168.135.123
    username: hsource
    password: hsource
    virtual-host: /hsource
    template:
      retry:
        enabled: true
        initial-interval: 10000ms
        multiplier: 2
        max-interval: 30000ms
      exchange: hs.item.exchange
    publisher-confirms: true
  mvc:
    throw-exception-if-no-handler-found: true
  resources:
      add-mappings: false
eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:10086/eureka
  instance:
    prefer-ip-address: true
    ip-address: 127.0.0.1
xxl:
  job:
    enabled: true
    admin:
      ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
      addresses: http://192.168.135.123:17010/xxl-job-admin
    executor:
      appname: hsource-item

      port: 9999
      ### 执行器日志保存天数 [选填] ：值大于3时生效，启用执行器Log文件定期清理功能，否则不生效；
      logretentiondays: 5
      ### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
      logpath:
      ### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
      ip:
      ### 执行器通讯TOKEN [选填]：非空时启用；
    accessToken:
jetcache:
  statIntervalMinutes: 15
  areaInCacheName: false
  local:
    default:
      type: linkedhashmap
      keyConvertor: fastjson
      limit: 100
  remote:
    default:
      type: redis
      keyConvertor: fastjson
      valueEncoder: java
      valueDecoder: java
      poolConfig:
        minIdle: 5
        maxIdle: 20
        maxTotal: 50
      host: ${spring.redis.host}
      port: ${spring.redis.port}